# In stock_analyzer/reporter_pdf.py

import os
import json
from datetime import datetime
from typing import Dict, Any, List
from dotenv import load_dotenv
import google.generativeai as genai
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.colors import HexColor, black, white
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image, PageBreak
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY
import matplotlib
matplotlib.use('Agg')

load_dotenv()
REPORTS_DIR = "reports"
os.makedirs(REPORTS_DIR, exist_ok=True)

try:
    genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
    MODEL = genai.GenerativeModel('gemini-1.5-flash-latest')
except Exception as e:
    MODEL = None
    print(f"Warning: Gemini API not configured for PDF reporter: {e}")

class ProfessionalReportGenerator:
    def __init__(self):
        self.colors = {
            'primary': HexColor('#1f4e79'),
            'secondary': HexColor('#2e75b6'),
            'success': HexColor('#28a745'),
            'danger': HexColor('#dc3545'),
            'warning': HexColor('#ffc107'),
            'light_grey': HexColor('#f8f9fa'),
            'dark_grey': HexColor('#6c757d')
        }
        self.styles = self._create_styles()

    def _create_styles(self):
        styles = getSampleStyleSheet()
        styles.add(ParagraphStyle(name='CustomTitle', parent=styles['Title'], fontSize=24, spaceAfter=20, textColor=self.colors['primary'], alignment=TA_CENTER, fontName='Helvetica-Bold'))
        styles.add(ParagraphStyle(name='SubTitle', parent=styles['Title'], fontSize=28, spaceAfter=30, textColor=black, alignment=TA_CENTER, fontName='Helvetica-Bold'))
        styles.add(ParagraphStyle(name='ExecutiveSummary', parent=styles['Normal'], fontSize=10, leading=14, spaceAfter=12, alignment=TA_JUSTIFY, fontName='Helvetica', backColor=self.colors['light_grey'], borderPadding=12, borderRadius=5))
        styles.add(ParagraphStyle(name='SectionHeader', parent=styles['h2'], fontSize=16, spaceAfter=12, spaceBefore=18, textColor=self.colors['primary'], fontName='Helvetica-Bold'))
        styles.add(ParagraphStyle(name='NormalJustified', parent=styles['Normal'], alignment=TA_JUSTIFY))
        styles.add(ParagraphStyle(name='NewsTitle', parent=styles['h3'], textColor=self.colors['secondary'], fontSize=12, spaceBefore=10))
        styles.add(ParagraphStyle(name='NewsMeta', parent=styles['Normal'], fontSize=8, textColor=self.colors['dark_grey']))
        return styles

    def _create_header_footer(self, canvas, doc):
        canvas.saveState()
        canvas.setFillColor(self.colors['primary'])
        canvas.rect(0, letter[1] - 40, letter[0], 40, fill=1, stroke=0)
        canvas.setFillColor(white)
        canvas.setFont('Helvetica-Bold', 14)
        canvas.drawString(inch, letter[1] - 25, "EquiSage Research")
        canvas.setFont('Helvetica', 9)
        canvas.drawRightString(letter[0] - inch, letter[1] - 25, f"Generated: {datetime.now().strftime('%B %d, %Y')}")
        canvas.setFillColor(self.colors['dark_grey'])
        canvas.setFont('Helvetica', 8)
        canvas.drawRightString(letter[0] - inch, 0.5 * inch, f"Page {doc.page}")
        canvas.drawString(inch, 0.5*inch, "This report is generated by EquiSage AI. Not financial advice.")
        canvas.restoreState()

    def _generate_enhanced_analysis(self, state: Dict[str, Any]) -> Dict[str, str]:
        if not MODEL:
            return self._fallback_analysis(state)

        company_name = state.get("company_name", "the company")
        
        prompt = f"""
        You are a sharp, insightful senior equity research analyst. Your task is to draft a professional, one-page executive briefing on **{company_name}**.
        Your analysis MUST be based ONLY on the data provided below. Your response must be a single, clean JSON object.

        **DATA FOR ANALYSIS:**
        - Financials & Ratios: {json.dumps(state.get("screener_data", {}))}
        - Technical Summary: {json.dumps(state.get("technical_analysis", {}).get("summary", {}))}
        - Recent Company News: {json.dumps(state.get("news_articles", []))}
        - Broader Market News: {json.dumps(state.get("market_context_articles", []))}

        **INSTRUCTIONS:**
        Generate the content for the following JSON keys. Be concise, professional, and data-driven.

        1.  "executive_summary": A 2-3 sentence investment thesis.
        2.  "investment_recommendation": A clear "BUY", "HOLD", or "SELL" rating with a one-sentence justification.
        3.  "fundamental_analysis": A paragraph interpreting the key financial data.
        4.  "technical_outlook": A paragraph summarizing the technical picture.
        5.  "risk_factors": A JSON list of 2-3 strings, where each string is a bullet point risk derived from the data.
        6.  "growth_catalysts": A JSON list of 2-3 strings, where each string is a bullet point catalyst derived from the data.
        7.  "valuation_summary": A short paragraph on valuation.

        Respond with ONLY the JSON object.
        """
        
        try:
            print("Generating enhanced PDF analysis with new prompt...")
            response = MODEL.generate_content(prompt)
            response_text = response.text.strip().replace('```json', '').replace('```', '').strip()
            analysis = json.loads(response_text)
            print("Successfully parsed enhanced analysis.")
            return analysis
        except Exception as e:
            print(f"Error in enhanced analysis, using fallback: {e}")
            return self._fallback_analysis(state)

    def _fallback_analysis(self, state: Dict[str, Any]) -> Dict[str, str]:
        return {
            "executive_summary": f"Analysis for {state.get('company_name', 'the company')} based on available data.",
            "investment_recommendation": "HOLD - Requires further analysis",
            "fundamental_analysis": "Financial metrics show mixed signals.",
            "technical_outlook": "Technical indicators suggest neutral to cautious optimism.",
            "risk_factors": ["General market volatility", "Sector-specific challenges"],
            "catalysts": ["Upcoming quarterly results", "Sector developments to watch"],
            "valuation_summary": "Current valuation appears reasonable."
        }
    
    def generate_pdf_report(self, state: Dict[str, Any]) -> Dict[str, str]:
        print("---Generating Professional PDF Report---")
        try:
            company_name = state.get("company_name", "Unknown Company")
            stock_ticker = state.get("stock_ticker", "N/A")
            
            analysis = self._generate_enhanced_analysis(state)
            
            safe_name = "".join(c for c in company_name if c.isalnum()).rstrip()
            pdf_filename = f"EquiSage_Report_{safe_name}_{datetime.now().strftime('%Y%m%d')}.pdf"
            pdf_path = os.path.join(REPORTS_DIR, pdf_filename)
            
            doc = SimpleDocTemplate(pdf_path, pagesize=letter, rightMargin=inch, leftMargin=inch, topMargin=inch, bottomMargin=inch)
            
            story = []
            
            story.append(Paragraph(f"Equity Research Report", self.styles['CustomTitle']))
            story.append(Paragraph(company_name, self.styles['SubTitle']))
            story.append(Spacer(1, 6))
            story.append(Paragraph(f"Ticker: {stock_ticker}", self.styles['Normal']))
            story.append(Spacer(1, 24))

            story.append(Paragraph("Executive Summary", self.styles['SectionHeader']))
            story.append(Paragraph(analysis.get('executive_summary', 'N/A'), self.styles['ExecutiveSummary']))
            
            rec_text = analysis.get('investment_recommendation', 'HOLD')
            rec_color = self.colors['success'] if 'BUY' in rec_text.upper() else self.colors['danger'] if 'SELL' in rec_text.upper() else self.colors['warning']
            rec_style = ParagraphStyle(name='Recommendation', parent=self.styles['h3'], textColor=rec_color, alignment=TA_CENTER)
            story.append(Paragraph(f"Investment Recommendation: {rec_text}", rec_style))
            story.append(Spacer(1, 20))
            
            key_ratios = state.get("screener_data", {}).get("key_ratios", {})
            if key_ratios:
                story.append(Paragraph("Key Financial Metrics", self.styles['SectionHeader']))
                metrics_data = list(key_ratios.items())
                table_data = []
                for i in range(0, len(metrics_data), 2):
                    row = []
                    key1, val1 = metrics_data[i]
                    row.extend([Paragraph(f"<b>{key1}</b>", self.styles['Normal']), Paragraph(str(val1), self.styles['Normal'])])
                    if i + 1 < len(metrics_data):
                        key2, val2 = metrics_data[i+1]
                        row.extend([Paragraph(f"<b>{key2}</b>", self.styles['Normal']), Paragraph(str(val2), self.styles['Normal'])])
                    else:
                        row.extend(['', ''])
                    table_data.append(row)
                if table_data:
                    metrics_table = Table(table_data, colWidths=[1.7*inch, 1.3*inch, 1.7*inch, 1.3*inch])
                    metrics_table.setStyle(TableStyle([('VALIGN', (0,0), (-1,-1), 'MIDDLE'), ('GRID', (0,0), (-1,-1), 0.5, self.colors['dark_grey']), ('BACKGROUND', (0,0), (-1,-1), self.colors['light_grey']), ('LEFTPADDING', (0,0), (-1,-1), 10),('RIGHTPADDING', (0,0), (-1,-1), 10)]))
                    story.append(metrics_table)
                    story.append(Spacer(1, 12))

            # --- THIS IS THE FIX FOR THE ATTRIBUTEERROR ---
            sections = [("Fundamental Analysis", "fundamental_analysis"), ("Technical Outlook", "technical_outlook"), ("Risk Factors", "risk_factors"), ("Growth Catalysts", "growth_catalysts"), ("Valuation Summary", "valuation_summary")]
            for title, key in sections:
                content = analysis.get(key, "Analysis not available.")
                story.append(Paragraph(title, self.styles['SectionHeader']))

                formatted_content = ""
                if isinstance(content, list):
                    # If it's a list (like for bullet points), join with line breaks
                    # We also add a bullet point character for better formatting
                    bullet_points = [f"• {item}" for item in content]
                    formatted_content = '<br/>'.join(bullet_points)
                elif isinstance(content, str):
                    # If it's a string, just replace newlines
                    formatted_content = content.replace('\n', '<br/>')
                else:
                    # Fallback for any other unexpected data types
                    formatted_content = str(content)
                
                story.append(Paragraph(formatted_content, self.styles['NormalJustified']))
            # --- END OF FIX ---

            news_articles = state.get("news_articles", [])
            if news_articles:
                story.append(PageBreak())
                story.append(Paragraph("Recent News Summary", self.styles['SectionHeader']))
                for article in news_articles[:5]:
                    story.append(Paragraph(article.get('title', 'No Title'), self.styles['NewsTitle']))
                    story.append(Paragraph(f"<i>Source: {article.get('source', 'N/A')} | Date: {article.get('published_date', 'N/A')}</i>", self.styles['NewsMeta']))
                    story.append(Paragraph(article.get('summary', ''), self.styles['NormalJustified']))
                    story.append(Spacer(1, 6))

            doc.build(story, onFirstPage=self._create_header_footer, onLaterPages=self._create_header_footer)
            
            print(f"PDF report generated: {pdf_path}")
            return {"pdf_report_path": pdf_path, "pdf_filename": pdf_filename}
            
        except Exception as e:
            print(f"Error generating PDF report: {e}")
            import traceback
            traceback.print_exc()
            return {"error": f"PDF generation failed: {str(e)}", "pdf_report_path": None}

def generate_pdf_report(state: Dict[str, Any]) -> Dict[str, Any]:
    generator = ProfessionalReportGenerator()
    return generator.generate_pdf_report(state)